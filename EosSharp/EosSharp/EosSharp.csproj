<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Authors>Mário Silva</Authors>
    <Company>GetScatter</Company>
    <PackageTags>EOS, NetStandard, secp256k1, Blockchain</PackageTags>
    <Description>C# client library for EOSIO blockchains. The library is based on https://github.com/EOSIO/eosjs and MIT licensed.</Description>
    <PackageLicenseUrl>https://github.com/GetScatter/eos-sharp/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/GetScatter/eos-sharp</PackageProjectUrl>
    <RepositoryUrl>https://github.com/GetScatter/eos-sharp</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <Copyright>Copyright 2019</Copyright>
    <Product>eos-sharp</Product>
    <PackageId>eos-sharp</PackageId>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <FileVersion>2.2.0.0</FileVersion>
    <Version>2.2.0</Version>
    <PackageReleaseNotes>Fix Use convert ToDecimal instead of explicit cast
Fix object to float conversion InvalidCastException (by KGMaxey)
Add support for variant fields 
Add support for binary extension types (by dbulha) 
Add block_num_hint to gettransaction (by dbulha)
Changed authority accounts to use permission level (by dbulha)</PackageReleaseNotes>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Cryptography.ECDSA.Secp256K1" Version="1.1.2" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\EosSharp.Core\EosSharp.Core.csproj" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>
  
  <!--
    The following solves the problem that 'dotnet pack' does not include the DLLs from referenced projects.
    See https://github.com/NuGet/Home/issues/3891 for a description of the problem
    and for newer versions / workarounds / built-in methods.
  -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
    <!-- include PDBs in the NuGet package -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>
  
  <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths-&gt;WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))" />
    </ItemGroup>
  </Target>

</Project>
